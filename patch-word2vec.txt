-func (m *Model) MostSimilar(seedWords []string) []WordData {
+func (m *Model) MostSimilar(seedWords []string) ([]WordData, error) {
        inputPosition := make([]int, 100)
        for k, v := range seedWords {
                var b int
@@ -63,6 +63,9 @@ func (m *Model) MostSimilar(seedWords []string) []WordData {
                                break
                        }
                }
+               if b == m.words {
+                       return make([]WordData, 0), errors.New(fmt.Sprintf("Word %s out of dictionary", v))
+               }
                inputPosition[k] = b
                //fmt.Printf("Word %v Position %v \n", v, b)
        }
@@ -110,5 +113,5 @@ func (m *Model) MostSimilar(seedWords []string) []WordData {
                        }
                }
        }
-       return bestWords
+       return bestWords, nil
